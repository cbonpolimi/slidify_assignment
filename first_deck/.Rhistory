y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
```
---
## The solution
### In the next few lectures we'll talk about why this is the solution
```{r}
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
```
---
```{r, fig.height=6,fig.width=7,echo=FALSE}
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
lm1 <- lm(galton$child ~ galton$parent)
g <- g + geom_abline(intercept = coef(lm1)[1], slope = coef(lm1)[2], size = 3, colour = grey(.5))
g
```
myHist <- function(mu){
mse <- mean((w*x - mu)^2)
g <- ggplot(w*x, aes(x = w*x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
as.dataframe(w*x)
as.data.frame(w*x)
aa<-as.data.frame(w*x)
w
x
x <- c(0.18, -1.54, 0.42, 0.95)
aa<-as.data.frame(w*x)
myHist <- function(mu){
mse <- mean((aa[,1] - mu)^2)
g <- ggplot(aa, aes(x = aa[,1])) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freqData > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
myPlot <- function(beta){
g <- ggplot(filter(freqData), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freqData$freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(manipulate)
myHist <- function(mu){
mse <- mean(w(x - mu)^2)
g <- ggplot(aa, aes(x = aa[,1])) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
myHist <- function(mu){
mse <- mean(w(x - mu)^2)
g <- ggplot(aa, aes(x = aa[,1])) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
mse <- mean(w*(x - mu)^2)
g <- ggplot(aa, aes(x = aa[,1])) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(0,3, step = 0.5))
manipulate(myHist(mu), mu = slider(-3,3, step = 0.5))
x<- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y-mean(y))~I(x-mean(x))-1)
data(mtcars)
lm(mpg~w)-1)
lm((mpg~w)-1)
mtcars$w
lm((mtcars$mpg~mtcars$w)-1)
mtcars$mpg
mtcars$w
lm((mtcars$mpg ~ mtcars$w)-1)
lm(mtcars$mpg ~ mtcars$w)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
(x[1,1]-mean(x))/sd(x)
(x[1,1]-mean(x))
x[1]-mean(x)
(x[1]-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y)~I(x)-1)
summary(lm(I(y)~I(x)-1))
lm(mtcars$mpg ~ mtcars$w)
summary(lm(I(y)~I(x)))
lm(I(y)~I(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(-3,3, step = 0.5))
x <- as.data.frame(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x <- as.data.frame(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(-3,3, step = 0.5))
x1<- as.data.frame(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
myHist <- function(mu){
mse <- mean((x1[,1] - mu)^2)
g <- ggplot(x, aes(x = x[,1])) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(-3,3, step = 0.5))
manipulate(myHist(mu), mu = slider(-3,3, step = 0.1))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
as.data.frame(x,w)
as.data.frame(x*w)
aa<-as.data.frame(x*w,x,w)
aa<-as.data.frame(x*w,c(x,w))
aa<-as.data.frame(c(x,w))
View(aa)
aa<-as.data.frame(cbind(x,w))
View(aa)
myHist <- function(mu){
mse <- mean((aa$w*(aa$x- mu)^2))
g <- ggplot(aa, aes(x = aa$x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(-3,3, step = 0.1))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y-mean(y))~I(x-mean(x))-1)
lm(I(y-mean(y))~I(x-mean(x)))
lm(I(mtcars$mpg-mean(mtcars$mpg))~I(mtcars$w-mean(mtcars$w))-1)
lm(mtcars$mpg~ mtcars$w)
lm(I(mtcars$mpg-mean(mtcars$mpg))~I(mtcars$w-mean(mtcars$w))-1)
lm(I(mtcars$mpg-mean(mtcars$mpg))~I(mtcars$w-mean(mtcars$w)))
lm(mtcars$mpg~ mtcars$w)
lm(y~0+x)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(adData)
adData = data.frame(predictors)
View(adData)
set.seed(975)
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
data(Wage)
summary(Wage)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age")],y=mixtures$CompressiveStrength,plot="pairs")
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age")],y=training$CompressiveStrength,plot="pairs")
inTrain
class(inTrain)
head(training)
library(ggplot2)
index(training)
?index
??index
plot(inTrain,mixtures$CompressiveStrength)
plot(inTrain,training$CompressiveStrength)
cut_com<-cut2(training$CompressiveStrength,g=3)
table(cut_com)
qplot(cut_com,training$Cement,fill=cut_com)
qplot(cut_com,training$Cement,fill=cut_com,geom=c("boxplot"))
qplot(cut_com,training$BlastFurnaceSlag,fill=cut_com,geom=c("boxplot"))
qplot(cut_com,training$FlyAsh,fill=cut_com,geom=c("boxplot"))
qplot(cut_com,training$Water,fill=cut_com,geom=c("boxplot"))
qplot(cut_com,training$Superplasticizer,fill=cut_com,geom=c("boxplot"))
qplot(cut_com,training$FineAggregate,fill=cut_com,geom=c("boxplot"))
qplot(cut_com,training$Age,fill=cut_com,geom=c("boxplot"))
hist(training$Superplasticizer)
summary(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer))
cut_com<-cut2(training$Superplasticizer,g=3)
table(cut_com)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
training[,grep("IL",training)]
grep("IL",training)
grep("IL",names(training))
training[,grep("IL",names(training))]
preOjb<-preProcess(training[,grep("IL",names(training))],method=c(center,scale))
preOjb<-preProcess(training[,grep("IL",names(training))],method=c("center","scale"))
summary(preOjb)
preOjb
small_train<-training[,grep("IL",names(training))]
prComp<-prcomp(small_train)
prComp$rotation
small_train<-training[,grep("^IL",names(training))]
prComp<-prcomp(small_train)
prComp$rotation
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
model<-lm(y~x)
model
summary(model)
example(anscombe)
example(anscombe)
summary(model)
summary(model)$sigma
summary(model)
using(mtcars)
Using(mtcars)
data(mtcars)
mt<-lm(mpg~weight)
mt<-lm(mtcars$mpg~mtcars$weight)
mt<-lm(mtcars$mpg~mtcars$w)
mt<-lm(mtcars$mpg~mtcars$wt)
summary(mt)
summary(mt)$coefficients
?mtcars
require(graphics)
pairs(mtcars, main = "mtcars data")
panel = panel.smooth, rows = 1)
> help(predict.lm)
help(predict.lm)
mean(wt)
mean(mtcars$wt)
prediction<-predict.lm(mt,as.data.frame(mean(mtcars$wt)))
as.data.frame(mean(mtcars$wt)
)
x1 <- rnorm(15)
y1 <- x1 + rnorm(15)
predict(lm(y1 ~ x1))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y1 ~ x1), new, se.fit = TRUE)
prediction<-predict.lm(mt,as.data.frame(mean(mtcars$wt)))
prediction
predict(mt, interval = "prediction")
mean(wt)
mean(mtcars$wt)
red.w.clim <- predict(mt, as.data.frame(mean(mtcars$wt)), interval = "confidence")
red.w.clim
mean(mtcars$wt)
red.w.clim <- predict(mt, as.data.frame(mean(mtcars$wt)), interval = "prediction")
red.w.clim
red.w.clim <- predict(mt, as.data.frame(c(3)), interval = "prediction")
red.w.clim
red.w.clim <- predict(mt, as.data.frame(c(3)), interval = "prediction",level = 0.95)
red.w.clim
red.w.clim <- predict(mt, as.data.frame(c(3)), interval = "confidence",level = 0.95)
red.w.clim
red.w.clim <- predict(mt, as.data.frame(c(3)), interval = "prediction",level = 0.95)
red.w.clim
mt<-lm(mtcars$mpg~mtcars$wt*1000)
?lm
mt<-lm(mtcars$mpg~mtcars$wt-1)
red.w.clim <- predict(mt, as.data.frame(c(3)), interval = "prediction",level = 0.95)
red.w.clim
mtcars$wt
?mtcars
ata.frame(waiting=80)
newdata<-data.frame(waiting=80)
newdata<-data.frame(mean(mtcars$wt))
predict(mt, newdata, interval = "prediction",level = 0.95)
mt<-lm(mtcars$mpg~mtcars$wt)
red.w.clim <- predict(mt, newdata, interval = "prediction",level = 0.95)
red.w.clim
newdata<-data.frame(wt=mean(mtcars$wt))
red.w.clim <- predict(mt, newdata, interval = "prediction",level = 0.95)
red.w.clim
newdata<-data.frame(wt=3)
red.w.clim <- predict(mt, newdata, interval = "prediction",level = 0.95)
red.w.clim
confint(mt, level = 0.95)
weights<-mtcars$wt/2
shortton<-lm(mtcars$mpg~weights)
confint(shortton, level = 0.95)
no_slope<-lm(mtcars$mpg~mtcars$wt-2)
?lm
no_slope<-lm(mtcars$mpg~0+mtcars$wt)
no_slope
resid(mt)
mean(resid(mt))
mt_intercept<-lm(mtcars$mpg~1)
summary(mt_intercept)
resid(mt_intercept)
sum(resid(mt_intercept)^2)
sum(resid(mt)^2)
sum(resid(mt)^2)/sum(resid(mt_intercept)^2)
library(devtools)
install_github('slidify','ramnathv')
library(slidify)
getwd()
setwd("C:\\Users\\Carlo\\Documents")
setwd("C:\\Users\\Carlo\\Documents\\R\\slidify")
author("first_deck")
opts_chunk$set(fig.path = 'assets/fig/')
source('~/.active-rstudio-document', echo=TRUE)
---
title: Testing ImpressJS
author: Ramnath Vaidyanathan
mode  : selfcontained
framework: impressjs
github:
user: ramnathv
repo: slidify
twitter:
text: "Slidify with impress.js!"
url:
lib: ../../libraries
--- .slide x:-1000 y:-1500
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
<script src="../../libraries/widgets/popcornjs/js/popcorn-complete.min.js"></script>
<script>
function handleDomLoadedExtra() {
var pop = Popcorn.vimeo(
"player",
"http://player.vimeo.com/video/41823197");
var articles = document.getElementsByTagName('article');
for (var i = 0; i < articles.length; ++i) {
var article = articles[i];
var timings = article.getAttribute("data-timings");
if (timings != null) {
var starts = timings.split(",");
for (var j = 0; j < starts.length; ++j) {
pop.code({
start: parseInt(starts[j]),
slideNumber: i,
onStart: function(options) {
impress.next();
}
});
}
}
}
};
$(document).ready(function(){
handleDomLoadedExtra();
});
</script>
<div id="player" style="width: 160px; height: 120px"></div>
<q>Aren't you just **bored** with all those slides-based presentations?</q>
--- .slide x:0 y:-1500
<q>Don't you think that presentations given **in modern browsers** shouldn't **copy the limits** of 'classic' slide decks?</q>
--- .slide x:1000 y:-1500
<q>Would you like to **impress your audience** with **stunning visualization** of your talk?</q>
--- #title x:0 y:0 scale:4
<span class="try">then you should try</span>
# impress.js^*
<span class="footnote">^* no rhyme intended</span>
--- #its x:850 y:3000 rot:45 scale:5
It's a **presentation tool** <br/>
inspired by the idea behind [prezi.com](http://prezi.com) <br/>
and based on the **power of CSS3 transforms and transitions** in modern browsers.
--- #big x:3500 y:2100 rot:180 scale:6
visualize your <b>big</b> <span class="thoughts">thoughts</span>
--- #tiny x:2825 y:2325 z:-3000 rot:300 scale:1
and **tiny** ideas
--- #ing x:3500 y:-850 rot:270 scale:6
by <b class="positioning">positioning</b>, <b class="rotating">rotating</b> and <b class="scaling">scaling</b> them on an infinite canvas
--- #imagination x:6700 y:-300 scale:6
the only **limit** is your <b class="imagination">imagination</b>
--- #source x:6300 y:2000 rot:20 scale:4
want to know more?
<q>[use the source](http://github.com/bartaz/impress.js), Luke</q>
--- #one-more-thing x:6000 y:4000 scale:2
one more thing...
--- #its-in-3d x:6200 y:4300 z:-100 rotx:-40 roty:-10 scale:2
<span class="have">have</span> <span class="you">you</span> <span class="noticed">noticed</span> <span class="its">it's</span> <span class="in">in</span> <b>3D<sup>*</sup></b>?
<span class="footnote">* beat that, prezi ;)</span>
--- #rstats x:-1000 y:5000
```{r echo = T, eval = F}
library(ggplot2)
qplot(wt, mpg, data = mtcars)
```
--- x:-1500 y:5500
```{r echo = F, eval = T, message = F}
opts_chunk$set(fig.path = 'assets/fig/')
library(ggplot2)
qplot(wt, mpg, data = mtcars)
```
